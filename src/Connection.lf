

target Cpp{
    cmake-include: "alarmclock.cmake"
};

public preamble {=
    #include <boost/asio.hpp>
    #include <iostream>
    
    constexpr short kBackLog = 30;
    constexpr unsigned short kPort = 666;
=}


main reactor Connection{
    state running: bool(true);
    input terminate: bool;

    method responde(raw_data: {= std::array<char, 4096>& =}) {=
        const std::string kContentLenght = "Content-Length";
        const char line_break = 0x0a;
        std::string data(raw_data.data(), 4096);
        std::string header, str_iterator, body;
        std::size_t current_position = 0;
        std::size_t content_length = 0;

        // start parsing the http header
        auto index_method = data.find(" ");
        std::string http_method = data.substr(0, index_method);
        auto index_endpoint = data.find(" ");
        std::string http_endpoint = data.substr(index_method + 1, index_method + index_endpoint - 3);

        std::cout << "Request: " << http_method << std::endl;
        std::cout << "Endpoint: " << http_endpoint << std::endl;
        // this jumps to the beginning of the body line by line
        
        std::istringstream iss(data);

        for (std::string line; std::getline(iss, line); ){
            current_position += line.size();
            if(line.empty()) {
                break;
            }else if( line.substr(0, kContentLenght.size()) == kContentLenght ){
                auto pos = line.find(" ");
                content_length = std::stoi(line.substr(pos + 1, line.size()));
                current_position += 8;
                break;
            }
        }

        // concatenates the body together
        body = data.substr(current_position, current_position + content_length);

        if (http_method == "GET" and http_endpoint == "/list") {
            std::cout << "[DEBUG]: HIT /list " << std::endl;
        }
    =}


    reaction (startup){=
        boost::asio::ip::tcp::endpoint ep(boost::asio::ip::address_v4::any(), kPort);
        boost::asio::io_service ios;
        boost::asio::ip::tcp::acceptor acceptor(ios, ep.protocol());
        acceptor.bind(ep);
        acceptor.listen(kBackLog);
        boost::asio::ip::tcp::socket sock(ios);
        
        std::array<char, 4096> data;
        
        std::cout << "Started Receiving" << std::endl;
        while (running){
            acceptor.accept(sock); 
            sock.read_some(boost::asio::buffer(data));
            responde(data);
            std::cout << "Yay Data: " << data.data() << std::endl;
        }
    =}

    reaction (terminate) {=
        running = false;
    =}

}



