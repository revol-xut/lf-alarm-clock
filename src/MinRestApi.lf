/*
* This is an adaptation to lingua franca from one of the boost asio examples
* url: https://www.boost.org/doc/libs/develop/libs/beast/example/http/server/small/http_server_small.cpp
* The above example was ported to lingua franca and adjusted to the alarm clock example
* Authors: 
* - Christopher M. Kohlhoff (original C++ implementation)
* - Tassilo Tanneberger
*/

target Cpp;

main reactor MinRestApi( socket_ : {= tcp::socket =}) {
    state thread: {= std::thread =};
    //state socket_: {= tcp::socket =};
    state buffer_: {= beast::flat_buffer =};
    state request_: {= http::request<http::dynamic_body> =};
    state response_: {= http::response<http::dynamic_body> =};
    state asio_deadline_: {= net::steady_timer =}; 

    public preamble {=
        #include <thread>
        #include <boost/beast/core.hpp>
        #include <boost/beast/http.hpp>
        #include <boost/beast/version.hpp>
        #include <boost/asio.hpp>
        #include <chrono>
        #include <cstdlib>
        #include <ctime>
        #include <iostream>
        #include <memory>
        #include <string>

        namespace beast = boost::beast;         // from <boost/beast.hpp>
        namespace http = beast::http;           // from <boost/beast/http.hpp>
        namespace net = boost::asio;            // from <boost/asio.hpp>
        using tcp = boost::asio::ip::tcp;       // from <boost/asio/ip/tcp.hpp>
        
        constexpr const char* kHost = "0.0.0.0";
        constexpr auto kPort = 9067;
        
        namespace my_program_state {
            std::size_t request_count() {
                static std::size_t count = 0;
                return ++count;
            }

            std::time_t now(){
                return std::time(0);
            }
        }
    =}
    
    method read_request() {=
        http::async_read(
            socket_,
            buffer_,
            request_,
            [this](beast::error_code ec,
                std::size_t bytes_transferred) {
                boost::ignore_unused(bytes_transferred);
                if(!ec)
                    this->process_request();
            });
    =}


    method process_request() {=
        response_.version(request_.version());
        response_.keep_alive(false);

        switch(request_.method()) {
        case http::verb::get:
            response_.result(http::status::ok);
            response_.set(http::field::server, "Beast");
            create_response();
            break;

        default:
            // We return responses indicating an error if
            // we do not recognize the request method.
            response_.result(http::status::bad_request);
            response_.set(http::field::content_type, "text/plain");
            beast::ostream(response_.body())
                << "Invalid request-method '"
                << std::string(request_.method_string())
                << "'";
            break;
        }

        write_response();
    =}

    method create_response() {=
         if(request_.target() == "/count") {
            response_.set(http::field::content_type, "text/html");
            beast::ostream(response_.body())
                << "<html>\n"
                <<  "<head><title>Request count</title></head>\n"
                <<  "<body>\n"
                <<  "<h1>Request count</h1>\n"
                <<  "<p>There have been "
                <<  my_program_state::request_count()
                <<  " requests so far.</p>\n"
                <<  "</body>\n"
                <<  "</html>\n";
        }
        else if(request_.target() == "/time") {
            response_.set(http::field::content_type, "text/html");
            beast::ostream(response_.body())
                <<  "<html>\n"
                <<  "<head><title>Current time</title></head>\n"
                <<  "<body>\n"
                <<  "<h1>Current time</h1>\n"
                <<  "<p>The current time is "
                <<  my_program_state::now()
                <<  " seconds since the epoch.</p>\n"
                <<  "</body>\n"
                <<  "</html>\n";
        }
        else {
            response_.result(http::status::not_found);
            response_.set(http::field::content_type, "text/plain");
            beast::ostream(response_.body()) << "File not found\r\n";
        }
    =}

    method write_response() {=
        response_.content_length(response_.body().size());

        http::async_write(
            socket_,
            response_,
            [this](beast::error_code ec, std::size_t) {
                this->socket_.shutdown(tcp::socket::shutdown_send, ec);
                this->deadline_.cancel();
            });

    =}

    method check_deadline() {=
        deadline_.async_wait(
            [this](beast::error_code ec) {
                if(!ec) {
                    // Close socket to cancel any outstanding operation.
                    this->socket_.close(ec);
                }
            });
    =}
     
    reaction (startup) {=
        auto http_server = [](tcp::acceptor& acceptor, tcp::socket& socket){
          acceptor.async_accept(socket,
              [&](beast::error_code ec)
              {
                  if(!ec)
                      std::make_shared<http_connection>(std::move(socket))->start();
                  http_server(acceptor, socket);
              });
        }

        net::io_context ioc{1};

        tcp::acceptor acceptor{ioc, {kHost, kPort}};
        tcp::socket socket{ioc};
        http_server(acceptor, socket);

        ioc.run();
    =}
}

